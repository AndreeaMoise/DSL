/*
 * generated by Xtext 2.25.0
 */
grammar InternalGameDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package assignment2.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package assignment2.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import assignment2.services.GameDSLGrammarAccess;

}
@parser::members {
	private GameDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(GameDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGame
entryRuleGame
:
{ before(grammarAccess.getGameRule()); }
	 ruleGame
{ after(grammarAccess.getGameRule()); } 
	 EOF 
;

// Rule Game
ruleGame 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGameAccess().getGroup()); }
		(rule__Game__Group__0)
		{ after(grammarAccess.getGameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGrid
entryRuleGrid
:
{ before(grammarAccess.getGridRule()); }
	 ruleGrid
{ after(grammarAccess.getGridRule()); } 
	 EOF 
;

// Rule Grid
ruleGrid 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGridAccess().getGroup()); }
		(rule__Grid__Group__0)
		{ after(grammarAccess.getGridAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSize
entryRuleSize
:
{ before(grammarAccess.getSizeRule()); }
	 ruleSize
{ after(grammarAccess.getSizeRule()); } 
	 EOF 
;

// Rule Size
ruleSize 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSizeAccess().getGroup()); }
		(rule__Size__Group__0)
		{ after(grammarAccess.getSizeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getStateAccess().getAlivesAssignment()); }
			(rule__State__AlivesAssignment)
			{ after(grammarAccess.getStateAccess().getAlivesAssignment()); }
		)
		(
			{ before(grammarAccess.getStateAccess().getAlivesAssignment()); }
			(rule__State__AlivesAssignment)*
			{ after(grammarAccess.getStateAccess().getAlivesAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCell
entryRuleCell
:
{ before(grammarAccess.getCellRule()); }
	 ruleCell
{ after(grammarAccess.getCellRule()); } 
	 EOF 
;

// Rule Cell
ruleCell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCellAccess().getGroup()); }
		(rule__Cell__Group__0)
		{ after(grammarAccess.getCellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCoordinates
entryRuleCoordinates
:
{ before(grammarAccess.getCoordinatesRule()); }
	 ruleCoordinates
{ after(grammarAccess.getCoordinatesRule()); } 
	 EOF 
;

// Rule Coordinates
ruleCoordinates 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCoordinatesAccess().getGroup()); }
		(rule__Coordinates__Group__0)
		{ after(grammarAccess.getCoordinatesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CellType
ruleCellType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellTypeAccess().getAlternatives()); }
		(rule__CellType__Alternatives)
		{ after(grammarAccess.getCellTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Action
ruleAction
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Condition
ruleCondition
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getAlternatives()); }
		(rule__Condition__Alternatives)
		{ after(grammarAccess.getConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellTypeAccess().getDEADEnumLiteralDeclaration_0()); }
		('dead')
		{ after(grammarAccess.getCellTypeAccess().getDEADEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCellTypeAccess().getALIVEEnumLiteralDeclaration_1()); }
		('alive')
		{ after(grammarAccess.getCellTypeAccess().getALIVEEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getDIESEnumLiteralDeclaration_0()); }
		('dies')
		{ after(grammarAccess.getActionAccess().getDIESEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getSURVIVESEnumLiteralDeclaration_1()); }
		('survives')
		{ after(grammarAccess.getActionAccess().getSURVIVESEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getFORMSEnumLiteralDeclaration_2()); }
		('forms')
		{ after(grammarAccess.getActionAccess().getFORMSEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getGREATEREnumLiteralDeclaration_0()); }
		('>')
		{ after(grammarAccess.getConditionAccess().getGREATEREnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLOWEREnumLiteralDeclaration_1()); }
		('<')
		{ after(grammarAccess.getConditionAccess().getLOWEREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getEQUALEnumLiteralDeclaration_2()); }
		('=')
		{ after(grammarAccess.getConditionAccess().getEQUALEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__0__Impl
	rule__Game__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getGameKeyword_0()); }
	'Game'
	{ after(grammarAccess.getGameAccess().getGameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__1__Impl
	rule__Game__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getNameAssignment_1()); }
	(rule__Game__NameAssignment_1)
	{ after(grammarAccess.getGameAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__2__Impl
	rule__Game__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getGridAssignment_2()); }
	(rule__Game__GridAssignment_2)
	{ after(grammarAccess.getGameAccess().getGridAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__3__Impl
	rule__Game__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getRulesKeyword_3()); }
	'Rules'
	{ after(grammarAccess.getGameAccess().getRulesKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getGameAccess().getRulesAssignment_4()); }
		(rule__Game__RulesAssignment_4)
		{ after(grammarAccess.getGameAccess().getRulesAssignment_4()); }
	)
	(
		{ before(grammarAccess.getGameAccess().getRulesAssignment_4()); }
		(rule__Game__RulesAssignment_4)*
		{ after(grammarAccess.getGameAccess().getRulesAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Grid__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group__0__Impl
	rule__Grid__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getGridKeyword_0()); }
	'Grid'
	{ after(grammarAccess.getGridAccess().getGridKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group__1__Impl
	rule__Grid__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getGroup_1()); }
	(rule__Grid__Group_1__0)?
	{ after(grammarAccess.getGridAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group__2__Impl
	rule__Grid__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getStateKeyword_2()); }
	'State'
	{ after(grammarAccess.getGridAccess().getStateKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getStateAssignment_3()); }
	(rule__Grid__StateAssignment_3)
	{ after(grammarAccess.getGridAccess().getStateAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Grid__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group_1__0__Impl
	rule__Grid__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getSizeKeyword_1_0()); }
	'Size'
	{ after(grammarAccess.getGridAccess().getSizeKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getSizeAssignment_1_1()); }
	(rule__Grid__SizeAssignment_1_1)
	{ after(grammarAccess.getGridAccess().getSizeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Size__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__0__Impl
	rule__Size__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getSizeAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__1__Impl
	rule__Size__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getRowsAssignment_1()); }
	(rule__Size__RowsAssignment_1)
	{ after(grammarAccess.getSizeAccess().getRowsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__2__Impl
	rule__Size__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getSizeAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__3__Impl
	rule__Size__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getColumnsAssignment_3()); }
	(rule__Size__ColumnsAssignment_3)
	{ after(grammarAccess.getSizeAccess().getColumnsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getSizeAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell__Group__0__Impl
	rule__Cell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellAccess().getCoordinatesAssignment_0()); }
	(rule__Cell__CoordinatesAssignment_0)
	{ after(grammarAccess.getCellAccess().getCoordinatesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellAccess().getCellTypeAssignment_1()); }
	(rule__Cell__CellTypeAssignment_1)
	{ after(grammarAccess.getCellAccess().getCellTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Coordinates__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coordinates__Group__0__Impl
	rule__Coordinates__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordinatesAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getCoordinatesAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coordinates__Group__1__Impl
	rule__Coordinates__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordinatesAccess().getRowAssignment_1()); }
	(rule__Coordinates__RowAssignment_1)
	{ after(grammarAccess.getCoordinatesAccess().getRowAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coordinates__Group__2__Impl
	rule__Coordinates__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordinatesAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getCoordinatesAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coordinates__Group__3__Impl
	rule__Coordinates__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordinatesAccess().getColumnAssignment_3()); }
	(rule__Coordinates__ColumnAssignment_3)
	{ after(grammarAccess.getCoordinatesAccess().getColumnAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coordinates__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordinatesAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getCoordinatesAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
	'Rule'
	{ after(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getConditionAssignment_1()); }
	(rule__Rule__ConditionAssignment_1)
	{ after(grammarAccess.getRuleAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getAmountAssignment_2()); }
	(rule__Rule__AmountAssignment_2)
	{ after(grammarAccess.getRuleAccess().getAmountAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getActionAssignment_3()); }
	(rule__Rule__ActionAssignment_3)
	{ after(grammarAccess.getRuleAccess().getActionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Game__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGameAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__GridAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getGridGridParserRuleCall_2_0()); }
		ruleGrid
		{ after(grammarAccess.getGameAccess().getGridGridParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__RulesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getRulesRuleParserRuleCall_4_0()); }
		ruleRule
		{ after(grammarAccess.getGameAccess().getRulesRuleParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__SizeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGridAccess().getSizeSizeParserRuleCall_1_1_0()); }
		ruleSize
		{ after(grammarAccess.getGridAccess().getSizeSizeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__StateAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGridAccess().getStateStateParserRuleCall_3_0()); }
		ruleState
		{ after(grammarAccess.getGridAccess().getStateStateParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__RowsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeAccess().getRowsINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getSizeAccess().getRowsINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__ColumnsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeAccess().getColumnsINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getSizeAccess().getColumnsINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__AlivesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getAlivesCellParserRuleCall_0()); }
		ruleCell
		{ after(grammarAccess.getStateAccess().getAlivesCellParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__CoordinatesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellAccess().getCoordinatesCoordinatesParserRuleCall_0_0()); }
		ruleCoordinates
		{ after(grammarAccess.getCellAccess().getCoordinatesCoordinatesParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__CellTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellAccess().getCellTypeCellTypeEnumRuleCall_1_0()); }
		ruleCellType
		{ after(grammarAccess.getCellAccess().getCellTypeCellTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__RowAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCoordinatesAccess().getRowINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getCoordinatesAccess().getRowINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__ColumnAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCoordinatesAccess().getColumnINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getCoordinatesAccess().getColumnINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getConditionConditionEnumRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getRuleAccess().getConditionConditionEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__AmountAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getAmountINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getRuleAccess().getAmountINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ActionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getActionActionEnumRuleCall_3_0()); }
		ruleAction
		{ after(grammarAccess.getRuleAccess().getActionActionEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
