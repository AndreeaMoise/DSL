/*
 * generated by Xtext 2.25.0
 */
package assignment2.ide.contentassist.antlr;

import assignment2.ide.contentassist.antlr.internal.InternalGameDSLParser;
import assignment2.services.GameDSLGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GameDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GameDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GameDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCellTypeAccess().getAlternatives(), "rule__CellType__Alternatives");
			builder.put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getGameAccess().getGroup(), "rule__Game__Group__0");
			builder.put(grammarAccess.getGridAccess().getGroup(), "rule__Grid__Group__0");
			builder.put(grammarAccess.getGridAccess().getGroup_1(), "rule__Grid__Group_1__0");
			builder.put(grammarAccess.getSizeAccess().getGroup(), "rule__Size__Group__0");
			builder.put(grammarAccess.getCellAccess().getGroup(), "rule__Cell__Group__0");
			builder.put(grammarAccess.getCoordinatesAccess().getGroup(), "rule__Coordinates__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getGameAccess().getNameAssignment_1(), "rule__Game__NameAssignment_1");
			builder.put(grammarAccess.getGameAccess().getGridAssignment_2(), "rule__Game__GridAssignment_2");
			builder.put(grammarAccess.getGameAccess().getRulesAssignment_4(), "rule__Game__RulesAssignment_4");
			builder.put(grammarAccess.getGridAccess().getSizeAssignment_1_1(), "rule__Grid__SizeAssignment_1_1");
			builder.put(grammarAccess.getGridAccess().getStateAssignment_3(), "rule__Grid__StateAssignment_3");
			builder.put(grammarAccess.getSizeAccess().getRowsAssignment_1(), "rule__Size__RowsAssignment_1");
			builder.put(grammarAccess.getSizeAccess().getColumnsAssignment_3(), "rule__Size__ColumnsAssignment_3");
			builder.put(grammarAccess.getStateAccess().getAlivesAssignment(), "rule__State__AlivesAssignment");
			builder.put(grammarAccess.getCellAccess().getCoordinatesAssignment_0(), "rule__Cell__CoordinatesAssignment_0");
			builder.put(grammarAccess.getCellAccess().getCellTypeAssignment_1(), "rule__Cell__CellTypeAssignment_1");
			builder.put(grammarAccess.getCoordinatesAccess().getRowAssignment_1(), "rule__Coordinates__RowAssignment_1");
			builder.put(grammarAccess.getCoordinatesAccess().getColumnAssignment_3(), "rule__Coordinates__ColumnAssignment_3");
			builder.put(grammarAccess.getRuleAccess().getConditionAssignment_1(), "rule__Rule__ConditionAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getAmountAssignment_2(), "rule__Rule__AmountAssignment_2");
			builder.put(grammarAccess.getRuleAccess().getActionAssignment_3(), "rule__Rule__ActionAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GameDSLGrammarAccess grammarAccess;

	@Override
	protected InternalGameDSLParser createParser() {
		InternalGameDSLParser result = new InternalGameDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GameDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GameDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
