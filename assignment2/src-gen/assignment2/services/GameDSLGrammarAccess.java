/*
 * generated by Xtext 2.25.0
 */
package assignment2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GameDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment2.GameDSL.Game");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cGridAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGridGridParserRuleCall_2_0 = (RuleCall)cGridAssignment_2.eContents().get(0);
		private final Keyword cRulesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulesRuleParserRuleCall_4_0 = (RuleCall)cRulesAssignment_4.eContents().get(0);
		
		//Game:
		//    'Game' name=ID grid=Grid
		//    'Rules' (rules += Rule)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Game' name=ID grid=Grid
		//'Rules' (rules += Rule)+
		public Group getGroup() { return cGroup; }
		
		//'Game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//grid=Grid
		public Assignment getGridAssignment_2() { return cGridAssignment_2; }
		
		//Grid
		public RuleCall getGridGridParserRuleCall_2_0() { return cGridGridParserRuleCall_2_0; }
		
		//'Rules'
		public Keyword getRulesKeyword_3() { return cRulesKeyword_3; }
		
		//(rules += Rule)+
		public Assignment getRulesAssignment_4() { return cRulesAssignment_4; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_4_0() { return cRulesRuleParserRuleCall_4_0; }
	}
	public class GridElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment2.GameDSL.Grid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGridKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSizeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSizeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSizeSizeParserRuleCall_1_1_0 = (RuleCall)cSizeAssignment_1_1.eContents().get(0);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateStateParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		
		//Grid:
		//    'Grid' ('Size' size=Size)? 'State' state=State
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Grid' ('Size' size=Size)? 'State' state=State
		public Group getGroup() { return cGroup; }
		
		//'Grid'
		public Keyword getGridKeyword_0() { return cGridKeyword_0; }
		
		//('Size' size=Size)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'Size'
		public Keyword getSizeKeyword_1_0() { return cSizeKeyword_1_0; }
		
		//size=Size
		public Assignment getSizeAssignment_1_1() { return cSizeAssignment_1_1; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_1_1_0() { return cSizeSizeParserRuleCall_1_1_0; }
		
		//'State'
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }
		
		//state=State
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//State
		public RuleCall getStateStateParserRuleCall_3_0() { return cStateStateParserRuleCall_3_0; }
	}
	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment2.GameDSL.Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRowsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRowsINTTerminalRuleCall_1_0 = (RuleCall)cRowsAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnsINTTerminalRuleCall_3_0 = (RuleCall)cColumnsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Size:
		//    '('rows=INT','columns=INT')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('rows=INT','columns=INT')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//rows=INT
		public Assignment getRowsAssignment_1() { return cRowsAssignment_1; }
		
		//INT
		public RuleCall getRowsINTTerminalRuleCall_1_0() { return cRowsINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//columns=INT
		public Assignment getColumnsAssignment_3() { return cColumnsAssignment_3; }
		
		//INT
		public RuleCall getColumnsINTTerminalRuleCall_3_0() { return cColumnsINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment2.GameDSL.State");
		private final Assignment cAlivesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAlivesCellParserRuleCall_0 = (RuleCall)cAlivesAssignment.eContents().get(0);
		
		//State:
		//    (alives += Cell)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(alives += Cell)+
		public Assignment getAlivesAssignment() { return cAlivesAssignment; }
		
		//Cell
		public RuleCall getAlivesCellParserRuleCall_0() { return cAlivesCellParserRuleCall_0; }
	}
	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment2.GameDSL.Cell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCoordinatesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCoordinatesCoordinatesParserRuleCall_0_0 = (RuleCall)cCoordinatesAssignment_0.eContents().get(0);
		private final Assignment cCellTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCellTypeCellTypeEnumRuleCall_1_0 = (RuleCall)cCellTypeAssignment_1.eContents().get(0);
		
		//Cell:
		//    coordinates=Coordinates cellType=CellType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//coordinates=Coordinates cellType=CellType
		public Group getGroup() { return cGroup; }
		
		//coordinates=Coordinates
		public Assignment getCoordinatesAssignment_0() { return cCoordinatesAssignment_0; }
		
		//Coordinates
		public RuleCall getCoordinatesCoordinatesParserRuleCall_0_0() { return cCoordinatesCoordinatesParserRuleCall_0_0; }
		
		//cellType=CellType
		public Assignment getCellTypeAssignment_1() { return cCellTypeAssignment_1; }
		
		//CellType
		public RuleCall getCellTypeCellTypeEnumRuleCall_1_0() { return cCellTypeCellTypeEnumRuleCall_1_0; }
	}
	public class CoordinatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment2.GameDSL.Coordinates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRowINTTerminalRuleCall_1_0 = (RuleCall)cRowAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnINTTerminalRuleCall_3_0 = (RuleCall)cColumnAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Coordinates:
		//    '('row=INT','column=INT')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('row=INT','column=INT')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//row=INT
		public Assignment getRowAssignment_1() { return cRowAssignment_1; }
		
		//INT
		public RuleCall getRowINTTerminalRuleCall_1_0() { return cRowINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//column=INT
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//INT
		public RuleCall getColumnINTTerminalRuleCall_3_0() { return cColumnINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment2.GameDSL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionEnumRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cAmountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAmountINTTerminalRuleCall_2_0 = (RuleCall)cAmountAssignment_2.eContents().get(0);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionActionEnumRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//Rule:
		//    'Rule' condition=Condition amount=INT action=Action
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Rule' condition=Condition amount=INT action=Action
		public Group getGroup() { return cGroup; }
		
		//'Rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionEnumRuleCall_1_0() { return cConditionConditionEnumRuleCall_1_0; }
		
		//amount=INT
		public Assignment getAmountAssignment_2() { return cAmountAssignment_2; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_2_0() { return cAmountINTTerminalRuleCall_2_0; }
		
		//action=Action
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//Action
		public RuleCall getActionActionEnumRuleCall_3_0() { return cActionActionEnumRuleCall_3_0; }
	}
	
	public class CellTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "assignment2.GameDSL.CellType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEADEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEADDeadKeyword_0_0 = (Keyword)cDEADEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cALIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cALIVEAliveKeyword_1_0 = (Keyword)cALIVEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CellType:
		//    DEAD = 'dead' |
		//    ALIVE = 'alive'
		//;
		public EnumRule getRule() { return rule; }
		
		//DEAD = 'dead' |
		//ALIVE = 'alive'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DEAD = 'dead'
		public EnumLiteralDeclaration getDEADEnumLiteralDeclaration_0() { return cDEADEnumLiteralDeclaration_0; }
		
		//'dead'
		public Keyword getDEADDeadKeyword_0_0() { return cDEADDeadKeyword_0_0; }
		
		//ALIVE = 'alive'
		public EnumLiteralDeclaration getALIVEEnumLiteralDeclaration_1() { return cALIVEEnumLiteralDeclaration_1; }
		
		//'alive'
		public Keyword getALIVEAliveKeyword_1_0() { return cALIVEAliveKeyword_1_0; }
	}
	public class ActionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "assignment2.GameDSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDIESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDIESDiesKeyword_0_0 = (Keyword)cDIESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSURVIVESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSURVIVESSurvivesKeyword_1_0 = (Keyword)cSURVIVESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFORMSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFORMSFormsKeyword_2_0 = (Keyword)cFORMSEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Action:
		//    DIES = 'dies' |
		//    SURVIVES = 'survives' |
		//    FORMS = 'forms'
		//;
		public EnumRule getRule() { return rule; }
		
		//DIES = 'dies' |
		//SURVIVES = 'survives' |
		//FORMS = 'forms'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DIES = 'dies'
		public EnumLiteralDeclaration getDIESEnumLiteralDeclaration_0() { return cDIESEnumLiteralDeclaration_0; }
		
		//'dies'
		public Keyword getDIESDiesKeyword_0_0() { return cDIESDiesKeyword_0_0; }
		
		//SURVIVES = 'survives'
		public EnumLiteralDeclaration getSURVIVESEnumLiteralDeclaration_1() { return cSURVIVESEnumLiteralDeclaration_1; }
		
		//'survives'
		public Keyword getSURVIVESSurvivesKeyword_1_0() { return cSURVIVESSurvivesKeyword_1_0; }
		
		//FORMS = 'forms'
		public EnumLiteralDeclaration getFORMSEnumLiteralDeclaration_2() { return cFORMSEnumLiteralDeclaration_2; }
		
		//'forms'
		public Keyword getFORMSFormsKeyword_2_0() { return cFORMSFormsKeyword_2_0; }
	}
	public class ConditionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "assignment2.GameDSL.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGREATERGreaterThanSignKeyword_0_0 = (Keyword)cGREATEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOWERLessThanSignKeyword_1_0 = (Keyword)cLOWEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQUALEqualsSignKeyword_2_0 = (Keyword)cEQUALEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Condition:
		//    GREATER = '>' |
		//    LOWER = '<' |
		//    EQUAL = '='
		//;
		public EnumRule getRule() { return rule; }
		
		//GREATER = '>' |
		//LOWER = '<' |
		//EQUAL = '='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GREATER = '>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_0() { return cGREATEREnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_0_0() { return cGREATERGreaterThanSignKeyword_0_0; }
		
		//LOWER = '<'
		public EnumLiteralDeclaration getLOWEREnumLiteralDeclaration_1() { return cLOWEREnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getLOWERLessThanSignKeyword_1_0() { return cLOWERLessThanSignKeyword_1_0; }
		
		//EQUAL = '='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_2() { return cEQUALEnumLiteralDeclaration_2; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_2_0() { return cEQUALEqualsSignKeyword_2_0; }
	}
	
	private final GameElements pGame;
	private final GridElements pGrid;
	private final SizeElements pSize;
	private final StateElements pState;
	private final CellElements pCell;
	private final CoordinatesElements pCoordinates;
	private final CellTypeElements eCellType;
	private final RuleElements pRule;
	private final ActionElements eAction;
	private final ConditionElements eCondition;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GameDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGame = new GameElements();
		this.pGrid = new GridElements();
		this.pSize = new SizeElements();
		this.pState = new StateElements();
		this.pCell = new CellElements();
		this.pCoordinates = new CoordinatesElements();
		this.eCellType = new CellTypeElements();
		this.pRule = new RuleElements();
		this.eAction = new ActionElements();
		this.eCondition = new ConditionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("assignment2.GameDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Game:
	//    'Game' name=ID grid=Grid
	//    'Rules' (rules += Rule)+
	//;
	public GameElements getGameAccess() {
		return pGame;
	}
	
	public ParserRule getGameRule() {
		return getGameAccess().getRule();
	}
	
	//Grid:
	//    'Grid' ('Size' size=Size)? 'State' state=State
	//;
	public GridElements getGridAccess() {
		return pGrid;
	}
	
	public ParserRule getGridRule() {
		return getGridAccess().getRule();
	}
	
	//Size:
	//    '('rows=INT','columns=INT')'
	//;
	public SizeElements getSizeAccess() {
		return pSize;
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}
	
	//State:
	//    (alives += Cell)+
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Cell:
	//    coordinates=Coordinates cellType=CellType
	//;
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}
	
	//Coordinates:
	//    '('row=INT','column=INT')'
	//;
	public CoordinatesElements getCoordinatesAccess() {
		return pCoordinates;
	}
	
	public ParserRule getCoordinatesRule() {
		return getCoordinatesAccess().getRule();
	}
	
	//enum CellType:
	//    DEAD = 'dead' |
	//    ALIVE = 'alive'
	//;
	public CellTypeElements getCellTypeAccess() {
		return eCellType;
	}
	
	public EnumRule getCellTypeRule() {
		return getCellTypeAccess().getRule();
	}
	
	//Rule:
	//    'Rule' condition=Condition amount=INT action=Action
	//;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//enum Action:
	//    DIES = 'dies' |
	//    SURVIVES = 'survives' |
	//    FORMS = 'forms'
	//;
	public ActionElements getActionAccess() {
		return eAction;
	}
	
	public EnumRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//enum Condition:
	//    GREATER = '>' |
	//    LOWER = '<' |
	//    EQUAL = '='
	//;
	public ConditionElements getConditionAccess() {
		return eCondition;
	}
	
	public EnumRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
